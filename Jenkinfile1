
def registry = 'https://siva02.jfrog.io'
def imageName = 'siva02.jfrog.io/docker01-docker-local/dev-project'
def version   = '2.1.3'

pipeline {
    agent{
        node{
            label 'maven-agent'
        }
    }
    environment{
    PATH = "/opt/apache-maven-3.9.3/bin:$PATH"
    }
      stages {
      stage('build'){
        
            steps {
	    echo '----------Build Started---------'
                sh 'mvn clean deploy -Dmaven.test.skip=true'
		echo '---------Build Completed-------'
            }
        }
	stage('Unit test'){
	steps{
	echo '--------------Unit test Started---------'
	sh 'mvn surefire-report:report'
	echo '------------Unit Test Complted-------'
	}
      }	
	stage('SonarQube analysis') {
	environment{
        scannerHome = tool 'siva-SonarScanner'
	}
	steps{
	echo '---------SonarQube Started---------'
    withSonarQubeEnv('siva-SonarQube-Server') { // If you have configured more than one global server connection, you can specify its name
      sh "${scannerHome}/bin/sonar-scanner"
    }
    echo '-----------SonarQube Completed---------'
  }
}
stage("Quality Gate"){
steps{
script{
  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
      }
    }
  }
 }
}
         stage("Jar Publish") {
        steps {
            script {
                    echo '<--------------- Jar Publish Started --------------->'
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"artifactory_token"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "maven-repo-libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)
                     echo '<--------------- Jar Publish Ended --------------->'

            }
        }
    }
    stage(" Docker Build ") {
      steps {
        script {
           echo '<--------------- Docker Build Started --------------->'
           app = docker.build(imageName+":"+version)
           echo '<--------------- Docker Build Ends --------------->'
        }
      }
    }

            stage (" Docker Publish "){
        steps {
            script {
               echo '<--------------- Docker Publish Started --------------->'
                docker.withRegistry(registry, 'artifactory_token'){
                    app.push()
                }
               echo '<--------------- Docker Publish Ended --------------->'
            }
        }
    }
    stage (" Deployment "){
    steps{
    script{
    sh 'helm install siva-01 devops-project-0.1.0.tgz'
          }
       }
    } 
  }
}
